using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Text;
using System.Threading.Tasks;

using System.Globalization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Entity.Response;

namespace Entity
{



    // <auto-generated />
    //
    // To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
    //
    //    using CodeBeautify;
    //
    //    var welcome8 = Welcome8.FromJson(jsonString);



    public partial class Ytplyer
    {
        [JsonProperty("attrs")]
        public Attrs Attrs { get; set; }

        [JsonProperty("assets")]
        public Assets Assets { get; set; }

        [JsonProperty("args")]
        public Args Args { get; set; }
    }

    public partial class Args
    {
        [JsonProperty("cver")]
        public string Cver { get; set; }

        [JsonProperty("player_response")]
        public string PlayerResponse { get; set; }

        [JsonProperty("innertube_api_version")]
        public string InnertubeApiVersion { get; set; }

        [JsonProperty("loaderUrl")]
        public Uri LoaderUrl { get; set; }

        [JsonProperty("c")]
        public string C { get; set; }

        [JsonProperty("hl")]
        public string Hl { get; set; }

        [JsonProperty("csi_page_type")]
        public string CsiPageType { get; set; }

        [JsonProperty("enablecsi")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Enablecsi { get; set; }

        [JsonProperty("innertube_context_client_version")]
        public string InnertubeContextClientVersion { get; set; }

        [JsonProperty("gapi_hint_params")]
        public string GapiHintParams { get; set; }

        [JsonProperty("host_language")]
        public string HostLanguage { get; set; }

        [JsonProperty("watermark")]
        public string Watermark { get; set; }

        [JsonProperty("innertube_api_key")]
        public string InnertubeApiKey { get; set; }

        [JsonProperty("cr")]
        public string Cr { get; set; }

        [JsonProperty("enablejsapi")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Enablejsapi { get; set; }

        [JsonProperty("vss_host")]
        public string VssHost { get; set; }

        [JsonProperty("fexp")]
        public string Fexp { get; set; }

        [JsonProperty("fflags")]
        public string Fflags { get; set; }

        public dynamic responseModel { set; get; }
    }

    public partial class Assets
    {
        [JsonProperty("js")]
        public string Js { get; set; }

        [JsonProperty("css")]
        public string Css { get; set; }
    }

    public partial class Attrs
    {
        [JsonProperty("id")]
        public string Id { get; set; }
    }

    public partial class Welcome8
    {
        public static Welcome8 FromJson(string json) => JsonConvert.DeserializeObject<Welcome8>(json, Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Welcome8 self) => JsonConvert.SerializeObject(self, Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }
}


